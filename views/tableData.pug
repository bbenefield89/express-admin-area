extends layouts/layout.pug

block content
  h1= tableName

  form(
    class="create_form"
    action=""
    method="POST"
    data-url=url
    data-tablename=tableName
  )
    each fieldName in fieldNames
      if fieldName !== 'id'
        if fieldName !== 'createdAt'
          if fieldName !== 'updatedAt'
            div
              label(for=fieldName)= fieldName
              input(
                autocomplete="off"
                data-fieldname=fieldName
                name=fieldName
                placeholder=fieldName
                type="text"
              )
    
    input(type="submit" value="Create")
  //- form

  table
    thead
      tr
        th
        th
        each fieldName in fieldNames
          if fieldName !== 'password'
            th= fieldName
    //- thead

    tbody
      tr(hidden)
        td
          button(
            class="delete_row_btn"
            data-tablename=tableName
            data-url=url
          ) Delete
        
        td
          a Edit

        each fieldName in fieldNames
          if fieldName !== 'password'
            td(data-field=fieldName)
    
      each row, ind in rows
        tr(class=`row_${ row.id }`)
          td
            button(
              class="delete_row_btn"
              data-id=row.id
              data-tablename=tableName
              data-url=url
            ) Delete
            
          td
            a(href=`${ url }?id=${ row.id }`) Edit

          each val, key in row.dataValues
            if key !== 'password'
              td(data-field=key)= val
    //- tbody
  //- table

  script.
    /**
      * @summary receives a rows database ID and the table name that it is a
      *          part of and uses these values to delete the item from the DB
      * @param {string} id
      * @param {Node}   domElement
      * @param {string} tableName
      * @param {string} url
      *
      * @method fromDB
      *   @summary makes AJAX call to backend passing the table name and ID
      *            to delete the row with this.id from this.tableName
      *   @return {void}
      *
      * @method fromDom
      *   @summary removes this DOM element from the DOM
      *   @return {void}
      */
    class DeleteRow {
      constructor(id, domElement, tableName, url) {
        this.id = id
        this.domElement = domElement
        this.tableName = tableName
        this.url = url
        this.fromDB = this.fromDB.bind(this)
        this.fromDOM = this.fromDOM.bind(this)
      }

      fromDB() {
        const { id, tableName, url } = this
        const method = 'DELETE'
        const headers = { 'Content-Type': 'application/json' }
        const body = JSON.stringify({ id, tableName })
        const request = { method, headers, body }
        
        fetch(url, request)
          .catch(err => console.log(err))
      }

      fromDOM() {
        this.domElement.remove()
      }
    }

    /**
     * placing the 'onclick' event on the 'tbody' DOM element makes handling
     * the creation of new 'delete' button elements and their corresponding
     * 'onclick' events easier. Look into event delegation.
     * https://davidwalsh.name/event-delegate
     */
    const tableBody = document.querySelector('tbody')
    tableBody.onclick = e => {
      //- targets the 'Delete' btn for each specific table row
      if (e.target.className.includes('delete_row_btn')) {
        const { id, tablename, url } = e.target.dataset
        const tableRow = document.querySelector(`.row_${ id }`)
        const deleteRow = new DeleteRow(id, tableRow, tablename, url)

        /**
         * by making this onclick event an IIFE, when the user clicks on the
         * 'delete' btn this onclick event will be automatically set on the
         * corresponding btn
         * without it being an IIFE we would need to click the 'delete' btn a
         * second time for the onclick event function to run
         */
        e.target.onclick = (() => {
          deleteRow.fromDB()
          deleteRow.fromDOM()
        })()
      }
    }

    /**
     * @summary creates a new <tr> in the <tbody> by cloning a hidden <tr>
     *          that is already in the DOM and replacing its data with the
     *          correct data now coming back from the database for this new row
     *
     * @param {object} inputData
     * @param {string} url
     *
     * @method inDB
     *   @summary takes the data from 'this.inputData' and makes an AJAX
     *            request to the backend which creates a new entry in the DB.
     *            Afterwards, it will call the 'this.inDOM' method which
     *            creates a new row in the DOM with the new rows data
     *   @return {void}
     *
     * @method inDOM
     *   @summary with the new row created in the DB this method will then take
     *            the data being returned from 'this.inDB' and create a new row
     *            in the DOM
     *   @return {void}
     */
    class CreateRow {
      constructor(inputData={}, url='') {
        this.inputData = inputData
        this.url = url
        this.newRowData = {}
        this.inDB = this.inDB.bind(this)
        this.inDOM = this.inDOM.bind(this)
      }

      inDB() {
        fetch(this.url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(this.inputData)
        })
          .then(data => data.json())
          .then(data => {
            this.newRowData = { ...data }
            console.log(this.newRowData)
            
            this.inDOM()
          })
          .catch(err => console.log(err))
      }

      inDOM() {
        const tableBody = document.querySelector('tbody')
        
        const newTableBodyRow = tableBody.firstChild.cloneNode(true)
        newTableBodyRow.className = `row_${ this.newRowData.id }`
        newTableBodyRow.removeAttribute('hidden')

        const newTableBodyRowDeleteBtn = newTableBodyRow.querySelector('button')
        newTableBodyRowDeleteBtn.dataset.id = this.newRowData.id

        const newTableBodyRowAnchorTag = newTableBodyRow.querySelector('a')
        newTableBodyRowAnchorTag.href = `admins?id=${ this.newRowData.id }`

        //- shorthand syntax - starts from the 3rd index in the array
        const [ , , ...rest ] = newTableBodyRow.children

        rest.forEach(tableDataElement => {
          tableDataElement.innerText = this.newRowData[ tableDataElement.dataset.field ]
        })

        tableBody.appendChild(newTableBodyRow)
      }
    }

    const createForm = document.querySelector('.create_form')
    createForm.onsubmit = e => {
      e.preventDefault()

      //- transform HTML 'nodelist' into a javascript array
      const createFormInputs = [ ...createForm.querySelectorAll('[type="text"]') ]
      const createFormInputsData = {
        tableName: createForm.dataset.tablename
      }

      /**
       * push the fieldnames and values from each input element in the create
       * new data form into 'createFormInputsData' object
       */
      createFormInputs.forEach(({ dataset, value }) => {
        const { fieldname } = dataset
        createFormInputsData[ fieldname ] = value
      })

      const createRow = new CreateRow(createFormInputsData, createForm.dataset.url)
      createRow.inDB()
    }