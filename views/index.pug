extends layouts/layout.pug

block content
  h1= message

  form(class="auth_form")
    input(class="auth_form__username_input" type="text" name="username")
    input(class="auth_form__password_input" type="password" name="password")
    input(type='submit' value='Submit')

  div(class="auth_error_container")
    span(class="auth_error_container__error_message")

  script.
    const authForm = document.querySelector('.auth_form')
    const usernameInput = document.querySelector('.auth_form__username_input')
    const passwordInput = document.querySelector('.auth_form__password_input')

    authForm.onsubmit = e => {
      e.preventDefault()
      
      const data = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          username: usernameInput.value,
          password: passwordInput.value
        })
      }
      authenticateAdmin(data)
    }

    async function authenticateAdmin(fetchData) {
      try {
        const loginAttemptObj = await fetch('/admin', fetchData)
        const loginAttemptData = await loginAttemptObj.json()
        checkForErrorsWhenLoggingIn(loginAttemptData.data)
        saveJwtToLocalStorage(loginAttemptData.data)
      }
      catch (err) {
        throw new Error(err)
      }
    }

    function checkForErrorsWhenLoggingIn(loginInformation) {
      if (loginInformation.hasOwnProperty('error')) {
        showAuthenticationErrorMessage(loginInformation.error)
        throw new Error('Invalid credentials provided.')
      }
    }

    function saveJwtToLocalStorage(token) {
      localStorage.setItem('token', token)
    }

    function goToDatabaseDashboard() {
      const goToUrl = window.location.href + '/dashboard'
      window.location.href = goToUrl
    }

    function showAuthenticationErrorMessage(errorMessage) {
      const authErrorMessageInDom = document.querySelector('.auth_error_container__error_message')
      authErrorMessageInDom.innerText = errorMessage
    }
